tester = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4OGQxMzE3M2RiYzAwZGI2ZmFmZDgyOSIsInJvbGUiOiJ0ZXN0ZXIiLCJpYXQiOjE3NTQxMTEyNTQsImV4cCI6MTc1NDExNDg1NH0.n2WrC4s07DAgw2mvuMa--sUNRrlXJEOpqKOLm-6qv6M

user = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4OGQxMzA4M2RiYzAwZGI2ZmFmZDgyNyIsInJvbGUiOiJ1c2VyIiwiaWF0IjoxNzU0MTExMzAwLCJleHAiOjE3NTQxMTQ5MDB9.LGUnwXTF53KlXqDDsoFDaNdwLD-v7OmjuhSkdHMKcQY

admin = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4OGQxMjgwM2RiYzAwZGI2ZmFmZDgyNSIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTc1NDExMTM1MCwiZXhwIjoxNzU0MTE0OTUwfQ.xwPmEqC-Gg6Ku_rMZk7OBoBd8xAETs9K65g7F_6uTYs



// import React, { useState } from "react";
// import axios from "axios";

// export const AddCourse = () => {
//   const [formData, setFormData] = useState({
//     title: "",
//     subtitle: "",
//     description: "",
//     keypoints: "",
//     thumbnail: null,
//     price: "",
//     discount: "",
//     category: "",
//     level: "",
//     chapters: [
//       {
//         title: "",
//         lectures: [
//           { title: "", duration: "", url: "", isPreviewFree: false }
//         ]
//       }
//     ]
//   });

//   const [errors, setErrors] = useState({});
//   const [success, setSuccess] = useState("");

//   const handleChange = (e) => {
//     const { name, value, files } = e.target;
//     setFormData((prev) => ({
//       ...prev,
//       [name]: files ? files[0] : value
//     }));
//   };

//   const handleChapterChange = (chapterIndex, field, value) => {
//     const updatedChapters = [...formData.chapters];
//     updatedChapters[chapterIndex][field] = value;
//     setFormData({ ...formData, chapters: updatedChapters });
//   };

//   const handleLectureChange = (chapterIndex, lectureIndex, field, value) => {
//     const updatedChapters = [...formData.chapters];
//     updatedChapters[chapterIndex].lectures[lectureIndex][field] = value;
//     setFormData({ ...formData, chapters: updatedChapters });
//   };

//   const addChapter = () => {
//     setFormData((prev) => ({
//       ...prev,
//       chapters: [
//         ...prev.chapters,
//         { title: "", lectures: [{ title: "", duration: "", url: "", isPreviewFree: false }] }
//       ]
//     }));
//   };

//   const addLecture = (chapterIndex) => {
//     const updatedChapters = [...formData.chapters];
//     updatedChapters[chapterIndex].lectures.push({
//       title: "",
//       duration: "",
//       url: "",
//       isPreviewFree: false
//     });
//     setFormData({ ...formData, chapters: updatedChapters });
//   };

//   const handleSubmit = async (e) => {
//     e.preventDefault();
//     try {
//       const formDataToSend = new FormData();

//       Object.entries(formData).forEach(([key, value]) => {
//         if (key === "thumbnail") {
//           formDataToSend.append("thumbnail", value);
//         } else if (key === "keypoints") {
//           formDataToSend.append("keypoints", value);
//         } else if (key === "chapters") {
//           formDataToSend.append("chapters", JSON.stringify(value));
//         } else {
//           formDataToSend.append(key, value);
//         }
//       });

//       const res = await axios.post(
//         "http://localhost:7001/api/course/addcourse",
//         formDataToSend,
//         { headers: { "Content-Type": "multipart/form-data" } }
//       );

//       setSuccess(res.data.message);
//       setErrors({});
//       setTimeout(() => {
//         window.location.reload();
//       }, 1500);
//     } catch (err) {
//       setErrors({ server: err.response?.data?.message || "Server error" });
//     }
//   };

//   return (
//     <div className="container py-4">
//       <h2 className="fw-bold mb-3">Add New Course</h2>

//       {success && <div className="alert alert-success">{success}</div>}
//       {errors.server && <div className="alert alert-danger">{errors.server}</div>}

//       <form onSubmit={handleSubmit}>
//         {/* Basic Fields */}
//         {[
//           { label: "Course Name", name: "title", type: "text" },
//           { label: "Course Subtitle", name: "subtitle", type: "text" },
//           { label: "Course Description", name: "description", type: "textarea" },
//           { label: "Course Key Points", name: "keypoints", type: "text", placeholder: "comma separated" },
//           { label: "Course Thumbnail", name: "thumbnail", type: "file" },
//           { label: "Course Price", name: "price", type: "number", placeholder: "0" },
//           { label: "Course Discount", name: "discount", type: "number", placeholder: "0" }
//         ].map(({ label, name, type, placeholder }) => (
//           <div className="mb-3" key={name}>
//             <label className="form-label">{label}</label>
//             {type === "textarea" ? (
//               <textarea
//                 name={name}
//                 className="form-control"
//                 rows="3"
//                 value={formData[name]}
//                 onChange={handleChange}
//               />
//             ) : (
//               <input
//                 name={name}
//                 type={type}
//                 className="form-control"
//                 placeholder={placeholder}
//                 value={type === "file" ? undefined : formData[name]}
//                 onChange={handleChange}
//               />
//             )}
//           </div>
//         ))}

//         {/* Category */}
//         <div className="mb-3">
//           <label className="form-label">Course Category</label>
//           <select
//             name="category"
//             className="form-select"
//             value={formData.category}
//             onChange={handleChange}
//           >
//             <option value="">Select category</option>
//             <option value="web-development">Web Development</option>
//             <option value="data-science">Data Science</option>
//             <option value="machine-learning">Machine Learning</option>
//             <option value="mobile-development">Mobile Development</option>
//             <option value="design">Design</option>
//             <option value="marketing">Marketing</option>
//             <option value="business">Business</option>
//             <option value="other">Other</option>
//           </select>
//         </div>

//         {/* Level */}
//         <div className="mb-3">
//           <label className="form-label">Course Level</label>
//           <select
//             name="level"
//             className="form-select"
//             value={formData.level}
//             onChange={handleChange}
//           >
//             <option value="">Select level</option>
//             <option value="beginner">Beginner</option>
//             <option value="intermediate">Intermediate</option>
//             <option value="advanced">Advanced</option>
//           </select>
//         </div>

//         {/* Chapters & Lectures */}
//         <h4>Chapters</h4>
//         {formData.chapters.map((chapter, chapterIndex) => (
//           <div key={chapterIndex} className="border p-3 mb-3">
//             <div className="mb-2">
//               <label>Chapter Title</label>
//               <input
//                 type="text"
//                 className="form-control"
//                 value={chapter.title}
//                 onChange={(e) =>
//                   handleChapterChange(chapterIndex, "title", e.target.value)
//                 }
//               />
//             </div>
//             <h5>Lectures</h5>
//             {chapter.lectures.map((lecture, lectureIndex) => (
//               <div key={lectureIndex} className="mb-3 p-2 border">
//                 <input
//                   type="text"
//                   placeholder="Lecture Title"
//                   className="form-control mb-1"
//                   value={lecture.title}
//                   onChange={(e) =>
//                     handleLectureChange(chapterIndex, lectureIndex, "title", e.target.value)
//                   }
//                 />
//                 <input
//                   type="number"
//                   placeholder="Duration (min)"
//                   className="form-control mb-1"
//                   value={lecture.duration}
//                   onChange={(e) =>
//                     handleLectureChange(chapterIndex, lectureIndex, "duration", e.target.value)
//                   }
//                 />
//                 <input
//                   type="text"
//                   placeholder="Video URL"
//                   className="form-control mb-1"
//                   value={lecture.url}
//                   onChange={(e) =>
//                     handleLectureChange(chapterIndex, lectureIndex, "url", e.target.value)
//                   }
//                 />
//                 <label className="form-check-label">
//                   <input
//                     type="checkbox"
//                     className="form-check-input me-2"
//                     checked={lecture.isPreviewFree}
//                     onChange={(e) =>
//                       handleLectureChange(chapterIndex, lectureIndex, "isPreviewFree", e.target.checked)
//                     }
//                   />
//                   Free Preview
//                 </label>
//               </div>
//             ))}
//             <button
//               type="button"
//               className="btn btn-sm btn-secondary mt-2"
//               onClick={() => addLecture(chapterIndex)}
//             >
//               + Add Lecture
//             </button>
//           </div>
//         ))}
//         <button type="button" className="btn btn-secondary mb-3" onClick={addChapter}>
//           + Add Chapter
//         </button>

//         <button type="submit" className="btn btn-primary">
//           Add Course
//         </button>
//       </form>
//     </div>
//   );
// };
















// import { DragDropContext, Droppable, Draggable } from "@hello-pangea/dnd";

// export const AddCourse = () => {
//   const [step, setStep] = useState(1);
//   const [instructors, setInstructors] = useState([]);
//   const [thumbnailPreview, setThumbnailPreview] = useState(null);

//   const [formData, setFormData] = useState({
//     title: "",
//     subtitle: "",
//     description: "",
//     keypoints: "",
//     thumbnail: null,
//     price: "",
//     discount: "",
//     category: "",
//     level: "",
//     language: "",
//     startDate: "",
//     endDate: "",
//     instructor: "",
//     options: {
//       personalizedPaths: false,
//       assignmentsDeadline: false,
//       attachFiles: false,
//       createDiscussions: false,
//       editReplies: false,
//       organizeGroups: false,
//       hideTotals: false,
//     },
//     chapters: [
//       {
//         title: "",
//         lectures: [{ title: "", duration: "", url: "", isPreviewFree: false }],
//       },
//     ],
//   });

//   // Fetch instructors
//   useEffect(() => {
//     const fetchInstructors = async () => {
//       try {
//         const res = await axios.get("/api/instructors");
//         setInstructors(res.data || []);
//       } catch (err) {
//         console.error("Failed to fetch instructors:", err);
//       }
//     };
//     fetchInstructors();
//   }, []);

//   // Handle input change
//   const handleChange = (e) => {
//     const { name, value, type, checked, files } = e.target;

//     if (name in formData.options) {
//       setFormData((prev) => ({
//         ...prev,
//         options: {
//           ...prev.options,
//           [name]: checked,
//         },
//       }));
//     } else if (type === "file") {
//       const file = files[0];
//       setFormData((prev) => ({
//         ...prev,
//         [name]: file,
//       }));
//       if (file) {
//         const reader = new FileReader();
//         reader.onloadend = () => setThumbnailPreview(reader.result);
//         reader.readAsDataURL(file);
//       }
//     } else {
//       setFormData((prev) => ({
//         ...prev,
//         [name]: value,
//       }));
//     }
//   };

//   // Add Chapter
//   const addChapter = () => {
//     setFormData((prev) => ({
//       ...prev,
//       chapters: [
//         ...prev.chapters,
//         { title: "", lectures: [{ title: "", duration: "", url: "", isPreviewFree: false }] },
//       ],
//     }));
//   };

//   // Delete Chapter
//   const deleteChapter = (cIndex) => {
//     setFormData((prev) => ({
//       ...prev,
//       chapters: prev.chapters.filter((_, i) => i !== cIndex),
//     }));
//   };

//   // Add Lecture
//   const addLecture = (cIndex) => {
//     const updated = [...formData.chapters];
//     updated[cIndex].lectures.push({ title: "", duration: "", url: "", isPreviewFree: false });
//     setFormData((prev) => ({ ...prev, chapters: updated }));
//   };

//   // Delete Lecture
//   const deleteLecture = (cIndex, lIndex) => {
//     const updated = [...formData.chapters];
//     updated[cIndex].lectures = updated[cIndex].lectures.filter((_, i) => i !== lIndex);
//     setFormData((prev) => ({ ...prev, chapters: updated }));
//   };

//   // Drag & Drop Reorder
//   const handleReorder = (result) => {
//     if (!result.destination) return;

//     const { source, destination, type } = result;

//     if (type === "chapter") {
//       const reordered = Array.from(formData.chapters);
//       const [removed] = reordered.splice(source.index, 1);
//       reordered.splice(destination.index, 0, removed);
//       setFormData((prev) => ({ ...prev, chapters: reordered }));
//     } else if (type === "lecture") {
//       const chapterIndex = parseInt(source.droppableId.split("-")[1], 10);
//       const targetChapterIndex = parseInt(destination.droppableId.split("-")[1], 10);

//       const sourceLectures = Array.from(formData.chapters[chapterIndex].lectures);
//       const [removed] = sourceLectures.splice(source.index, 1);

//       const targetLectures = Array.from(formData.chapters[targetChapterIndex].lectures);
//       targetLectures.splice(destination.index, 0, removed);

//       const updatedChapters = [...formData.chapters];
//       updatedChapters[chapterIndex].lectures = sourceLectures;
//       updatedChapters[targetChapterIndex].lectures = targetLectures;

//       setFormData((prev) => ({ ...prev, chapters: updatedChapters }));
//     }
//   };

//   // Submit Course
//   const handleSubmit = async () => {
//     const payload = new FormData();
//     Object.entries(formData).forEach(([key, value]) => {
//       if (key === "options" || key === "chapters") {
//         payload.append(key, JSON.stringify(value));
//       } else {
//         payload.append(key, value);
//       }
//     });

//     try {
//       const res = await axios.post("/api/courses", payload, {
//         headers: { "Content-Type": "multipart/form-data" },
//       });
//       console.log("Course created:", res.data);
//       alert("Course created successfully!");
//     } catch (err) {
//       console.error("Error creating course:", err);
//       alert("Failed to create course.");
//     }
//   };

//   return (
//     <div className="container py-4">
//       <h2>Add Course</h2>

//       {/* STEP 1: Course Info */}
//       {step === 1 && (
//         <div className="row">
//           {/* Left Column */}
//           <div className="col-md-6">
//             <input className="form-control mb-2" name="title" placeholder="Course Title" onChange={handleChange} />
//             <input className="form-control mb-2" name="subtitle" placeholder="Subtitle" onChange={handleChange} />
//             <textarea className="form-control mb-2" name="description" placeholder="Description" onChange={handleChange} />
//             <input className="form-control mb-2" name="keypoints" placeholder="Key Points (comma separated)" onChange={handleChange} />

//             <input className="form-control mb-2" type="file" name="thumbnail" onChange={handleChange} />
//             {thumbnailPreview && (
//               <div className="mb-3">
//                 <label className="fw-bold d-block">Thumbnail Preview:</label>
//                 <img src={thumbnailPreview} alt="Thumbnail Preview" className="img-fluid rounded border" style={{ maxHeight: "200px" }} />
//               </div>
//             )}
//           </div>

//           {/* Right Column */}
//           <div className="col-md-6">
//             <input className="form-control mb-2" name="price" placeholder="Price" onChange={handleChange} />
//             <input className="form-control mb-2" name="discount" placeholder="Discount %" onChange={handleChange} />

//             {/* Dropdowns */}
//             <select className="form-control mb-2" name="category" onChange={handleChange}>
//               <option value="">Select Category</option>
//               <option value="programming">Programming</option>
//               <option value="design">Design</option>
//               <option value="marketing">Marketing</option>
//               <option value="business">Business</option>
//             </select>

//             <select className="form-control mb-2" name="level" onChange={handleChange}>
//               <option value="">Select Level</option>
//               <option value="beginner">Beginner</option>
//               <option value="intermediate">Intermediate</option>
//               <option value="advanced">Advanced</option>
//             </select>

//             <select className="form-control mb-2" name="language" onChange={handleChange}>
//               <option value="">Select Language</option>
//               <option value="english">English</option>
//               <option value="spanish">Spanish</option>
//               <option value="french">French</option>
//               <option value="german">German</option>
//             </select>

//             <input className="form-control mb-2" type="date" name="startDate" onChange={handleChange} />
//             <input className="form-control mb-2" type="date" name="endDate" onChange={handleChange} />

//             {/* Instructor Dropdown */}
//             {/* <select className="form-control mb-2" name="instructor" onChange={handleChange}>
//               <option value="">Select Instructor</option>
//               {instructors.map((inst) => (
//                 <option key={inst.id} value={inst.id}>
//                   {inst.name}
//                 </option>
//               ))}
//             </select> */}
//           </div>

//           <div className="col-12">
//             {/* Options as checkboxes */}
//             <div className="mb-3">
//               <label className="fw-bold">Options:</label>
//               {Object.keys(formData.options).map((optKey) => (
//                 <div key={optKey} className="form-check">
//                   <input
//                     type="checkbox"
//                     className="form-check-input"
//                     name={optKey}
//                     checked={formData.options[optKey]}
//                     onChange={handleChange}
//                   />
//                   <label className="form-check-label">{optKey}</label>
//                 </div>
//               ))}
//             </div>

//             <button className="btn btn-primary" onClick={() => setStep(2)}>Next →</button>
//           </div>
//         </div>
//       )}

//       {/* STEP 2: Chapters + Lectures */}
//       {step === 2 && (
//         <div>
//           {formData.chapters.map((chapter, cIndex) => (
//             <div key={cIndex} className="border p-3 mb-3 rounded">
//               <div className="d-flex justify-content-between align-items-center">
//                 <input
//                   className="form-control mb-2"
//                   placeholder={`Chapter ${cIndex + 1} Title`}
//                   value={chapter.title}
//                   onChange={(e) => {
//                     const updated = [...formData.chapters];
//                     updated[cIndex].title = e.target.value;
//                     setFormData({ ...formData, chapters: updated });
//                   }}
//                 />
//                 <button className="btn btn-sm btn-danger ms-2" onClick={() => deleteChapter(cIndex)}>🗑 </button>
//               </div>

//               {chapter.lectures.map((lecture, lIndex) => (
//                 <div key={lIndex} className="ms-3 mb-2 d-flex align-items-center">
//                   <input
//                     className="form-control me-2"
//                     placeholder="Lecture Title"
//                     value={lecture.title}
//                     onChange={(e) => {
//                       const updated = [...formData.chapters];
//                       updated[cIndex].lectures[lIndex].title = e.target.value;
//                       setFormData({ ...formData, chapters: updated });
//                     }}
//                   />
//                   <input
//                     className="form-control me-2"
//                     placeholder="Duration"
//                     value={lecture.duration}
//                     onChange={(e) => {
//                       const updated = [...formData.chapters];
//                       updated[cIndex].lectures[lIndex].duration = e.target.value;
//                       setFormData({ ...formData, chapters: updated });
//                     }}
//                   />
//                   <input
//                     className="form-control me-2"
//                     placeholder="Video URL"
//                     value={lecture.url}
//                     onChange={(e) => {
//                       const updated = [...formData.chapters];
//                       updated[cIndex].lectures[lIndex].url = e.target.value;
//                       setFormData({ ...formData, chapters: updated });
//                     }}
//                   />
//                   <button className="btn btn-sm btn-outline-danger" onClick={() => deleteLecture(cIndex, lIndex)}>❌</button>
//                 </div>
//               ))}

//               <button className="btn btn-sm btn-outline-primary mt-2" onClick={() => addLecture(cIndex)}>+ Add Lecture</button>
//             </div>
//           ))}

//           <button className="btn btn-outline-primary mb-3" onClick={addChapter}>+ Add Chapter</button>
//           <br />
//           <button className="btn btn-secondary me-2" onClick={() => setStep(1)}>← Back</button>
//           <button className="btn btn-primary" onClick={() => setStep(3)}>Next →</button>
//         </div>
//       )}

//       {/* STEP 3: Review + Reorder */}
//       {step === 3 && (
//         <DragDropContext onDragEnd={handleReorder}>
//           <Droppable droppableId="chapters" type="chapter">
//             {(provided) => (
//               <div {...provided.droppableProps} ref={provided.innerRef}>
//                 {formData.chapters.map((chapter, cIndex) => (
//                   <Draggable key={`chapter-${cIndex}`} draggableId={`chapter-${cIndex}`} index={cIndex}>
//                     {(provided) => (
//                       <div
//                         className="border p-3 mb-2 bg-light rounded"
//                         ref={provided.innerRef}
//                         {...provided.draggableProps}
//                       >
//                         <h5 {...provided.dragHandleProps}>📘 {chapter.title || "Untitled Chapter"}</h5>

//                         <Droppable droppableId={`chapter-${cIndex}`} type="lecture">
//                           {(provided) => (
//                             <div ref={provided.innerRef} {...provided.droppableProps}>
//                               {chapter.lectures.map((lecture, lIndex) => (
//                                 <Draggable
//                                   key={`lecture-${cIndex}-${lIndex}`}
//                                   draggableId={`lecture-${cIndex}-${lIndex}`}
//                                   index={lIndex}
//                                 >
//                                   {(provided) => (
//                                     <div
//                                       className="p-2 mb-1 bg-white border rounded"
//                                       ref={provided.innerRef}
//                                       {...provided.draggableProps}
//                                       {...provided.dragHandleProps}
//                                     >
//                                       🎬 {lecture.title || "Untitled Lecture"} ({lecture.duration || "No duration"})
//                                     </div>
//                                   )}
//                                 </Draggable>
//                               ))}
//                               {provided.placeholder}
//                             </div>
//                           )}
//                         </Droppable>
//                       </div>
//                     )}
//                   </Draggable>
//                 ))}
//                 {provided.placeholder}
//               </div>
//             )}
//           </Droppable>

//           <button className="btn btn-secondary me-2 mt-3" onClick={() => setStep(2)}>← Back</button>
//           <button className="btn btn-success mt-3" onClick={handleSubmit}>✅ Submit Course</button>
//         </DragDropContext>
//       )}
//     </div>
//   );
// };
